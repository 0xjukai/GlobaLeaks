#!/usr/bin/env python
# -*- encoding: utf-8 -*-

import json
import os
import sys
import sqlite3
import subprocess as sp
from datetime import datetime
import argparse

from globaleaks import models
from globaleaks.db import get_db_file
from globaleaks.settings import GLSettings
from globaleaks.security import hash_password, generateRandomPassword, generateRandomSalt
from globaleaks import DATABASE_VERSION
from globaleaks.constants import ROOT_TENANT


def check_file(f):
    if not os.path.isfile(f):
        print >> sys.stderr, "Missing file: %s" % f
    try:
        with open(f, 'r'):
            pass
    except IOError as err:
        print >> sys.stderr, err
        sys.exit(1)


def check_dir(d):
    if not os.path.isdir(d):
        print >> sys.stderr, "Missing dir: %s" % d
        sys.exit(1)


def default_backup_path():
    t = datetime.now().strftime("%y_%m_%d")
    name = "globaleaks_backup_%s.tar.gz" % t
    return os.path.join("/tmp", name)


def default_workdir():
    return GLSettings.working_path


def default_db_path():
    return GLSettings.db_path

def is_gl_running():
    try:
        with open(GLSettings.pidfile_path, 'r') as fd:
            gl_pid = int(fd.read())
            try:
                os.kill(gl_pid, 0)
            except OSError:
                return False
            return True
    except IOError:
        return False


def backup(args):
    workdir = args.workdir
    check_dir(workdir)

    must_stop = is_gl_running()

    if must_stop: sp.check_call("service globaleaks stop", shell=True)
    print "Creating an archive backup of the globaleaks setup. . ."
    p_head, p_tail = os.path.split(args.workdir)

    # Looks like: > tar -zcf globaleaks_backup_16_08_07.tar.gz -C /var/ globaleaks
    sp.check_call(["tar", "-zcf", args.backuppath, "-C", p_head, p_tail])

    if must_stop: sp.check_call("service globaleaks start", shell=True)
    print "Success: The archived backup was created at:", args.backuppath


def restore(args):
    check_dir(args.workdir)

    check_file(args.backuppath)

    print "\n", "-"*72
    print "WARNING this command will DELETE everything currently in %s"% args.workdir
    print "-"*72
    ans = raw_input("Are you sure that you want to continue? [y/n] ")
    if not ans == "y":
        sys.exit(0)
    print "-"*72

    must_stop = is_gl_running()
    if must_stop: sp.check_call("service globaleaks stop", shell=True)
    print "Deleting %s . . ." % args.workdir

    p_head, p_tail = os.path.split(args.workdir)

    # TODO remove workdir str fmt
    sp.check_call("find %s -type f -exec shred -vzn 3 {} \;" % args.workdir, shell=True)
    sp.check_call(["rm", "-rf", args.workdir])

    print "Extracting the archive %s" % args.backuppath
    # Looks like: > tar -xf globaleaks_backup_16_08_07.tar.gz -C /var/ globaleaks
    sp.check_call(["tar", "-xf", args.backuppath, "-C", p_head, p_tail])

    if must_stop: sp.check_call("service globaleaks start", shell=True)

    print "Success! globaleaks has been restored from a backup"


def reset_pass(args):
    db_version, db_path = get_db_file(args.dbpath)

    if db_version <= 0:
        return

    check_file(db_path)

    salt = generateRandomSalt()

    hashed_password = hash_password(args.password, salt)

    QUERY = "UPDATE user SET salt=?, password=? WHERE username=?;"

    conn = sqlite3.connect(db_path)
    c = conn.cursor()
    c.execute(QUERY, (salt, hashed_password, args.username))

    if c.rowcount != 1:
        print "Failed! The user '%s' does not exist." % args.username
        sys.exit(1)

    conn.commit()
    conn.close()

    print "================================="
    print "||  Password reset completed   ||"
    print "================================="
    print "     Username: %s" % args.username
    print "     Password: %s" % args.password
    print "================================="


def read_var(args):
    db_version, db_path = get_db_file(GLSettings.db_path)

    if db_version <= 0:
        return

    check_file(db_path)
    try:
        # TODO (tid_me) needs testing
        QUERY = "SELECT value FROM config WHERE tid=%d AND var_name=?" % ROOT_TENANT

        conn = sqlite3.connect(db_path)
        c = conn.cursor()
        c.execute(QUERY, (args.varname, ))
        ret = c.fetchone()
        if ret is None:
            print "Failed to read value of var '%s'." % args.varname
            sys.exit(1)

        conn.close()

        print json.loads(str(ret[0]))['v']
    except Exception as e:
        # This string is dumped into stdout to ensure that an exact string match
        # will fail
        print "ERROR"
        raise e


GLSettings.eval_paths()

parser = argparse.ArgumentParser(prog="gl-admin",
                 description="GlobaLeaks backend administator interface")

subp = parser.add_subparsers(title="commands")

bck_p = subp.add_parser("backup", help="create a zipped backup of the gl working dir")
bck_p.add_argument("-w", "--workdir", help="the location of dynamic globaleaks content",
                   default=default_workdir())
bck_p.add_argument("backuppath", nargs="?", help="the path and name of the backup",
                   default=default_backup_path())
bck_p.set_defaults(func=backup)

res_p = subp.add_parser("restore", help="unpack a zipped backup of globaleaks")
res_p.add_argument("-w", "--workdir", help="the location of dynamic gl content",
                   default=default_workdir())
res_p.add_argument("backuppath", nargs="?", help="the path and name of the backup",
                   default=default_backup_path())
res_p.set_defaults(func=restore)

pw_p = subp.add_parser("resetpass", help="reset a user's password")
pw_p.add_argument("--dbpath", help="the path to the globaleaks db", default=default_db_path())
pw_p.add_argument("username", help="the username used to login into GL")
pw_p.add_argument("password", nargs="?", help="if not set a random password is generated",
                  default=generateRandomPassword())
pw_p.set_defaults(func=reset_pass)

rv_p = subp.add_parser("readvar", help="read database variable")
rv_p.add_argument("--dbpath", help="the path to the globaleaks db", default=default_db_path())
rv_p.add_argument("--varname", help="the path to the globaleaks db", default='version')
rv_p.set_defaults(func=read_var)


if __name__ == '__main__':
    args = parser.parse_args()
    args.func(args)
